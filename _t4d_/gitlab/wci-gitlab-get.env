
_t4dModWciGitlabGet(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModWciGitlabGet
#   - Name:
#       _t4dModWciGitlabGet
###
#   - Synopsis:
#       Get context from path sended
###
#   - Usage:
#       _t4dModWciGitlabGet [shortcut] <Path>
###
#   - Shortcuts:
#       * lastBuild                     = search for lastBuild path using current repo/branch
#       * branches                      = search for jenkins path using current repo/branch
#       * tag                           = search for jenkins path using current repo/branch
#       * pipelines                     = search for jenkins path using current repo
#
###
#   - Example:
#       * _t4dModWciGitlabGet lastBuild                             = get last build path
#       * _t4dModWciGitlabGet branches                              = list branch of current pipeline
#       * _t4dModWciGitlabGet pipelines                             = list pipelines of current repo's jenkins config
#       * _t4dModWciGitlabGet pipelines Pipeline-Develop            = list branch/tags in Pipeline-Develop
#       * _t4dModWciGitlabGet pipelines Pipeline-Develop develop    = list build in Pipeline-Develop/develop
#       * _t4dModWciGitlabGet Pipeline-Develop                      = list branch in Pipeline-Develop, adding WS_JENKINS_ROOT as prefix
#       * _t4dModWciGitlabGet develop                               = list build in Pipeline-Develop/develop
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _lookingFor="$(echo $1 | cut -d '|' -f1)"
    local _requestBr="$(echo $1 | sed 's/'$_lookingFor'|//g' | rev | cut -d '|' -f1 | rev)"
    local _Path="$(echo $1 | sed 's/'$_lookingFor'|//g' | sed 's#|'$_requestBr'##g')"
    if [[ "$_requestBr" == "$_Path" ]]; then _requestBr=""; fi #brain empty

    local _branchName="${_requestBr:-$(_t4dSrcGitInfoBranch)}"

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabGet.json"

    _t4dDebugLog $plog "INPUT $1"
    _t4dDebugLog $plog "COUCOU $_Path - $_lookingFor - $_branchName - $_Action"
    case $_lookingFor in 
        lastBuild*)
            _t4dGitLabProjectPipelinesAPILatest $_Path $_OuputjsonFile $_branchName
            echo ""
            local _message="$(_t4dGetJsonData ${_OuputjsonFile} ".message")" 2> /dev/null
            if [[ "$_message" != "null" ]]; then
                echo "${plcyan}${_branchName} ${pred}$(_t4dPromptVarWithSpace 10 ${_message}) ${pstd} Branch does not exist or might be too old" | sed 's|%||g'
            else
                local _status="$(_t4dGetJsonData ${_OuputjsonFile} ".status")"
                local _detailedLabel="$(_t4dGetJsonData ${_OuputjsonFile} ".detailed_status.label")"
                echo "${plcyan}${_branchName} ${pstd}$(_t4dPromptVarWithSpace 10 $(_t4dModWciGitlabParseStatus ${_status})) ${plpurple}${_status}${pstd} ${puyellow} $_detailedLabel ${pstd}" | sed 's|%||g'
                _t4dPromptEndOfLine "$(_t4dGetJsonData ${_OuputjsonFile} ".web_url")" $plblue
            fi
        ;;
        branch*)
            _t4dGitLabProjectAPIListBranches $_Path $_OuputjsonFile "&sort=updated_desc"
            _t4dModWciGitlabListParse "last updated branches" $_OuputjsonFile
        ;;
        tag*)
            _t4dGitLabProjectAPIListTags $_Path $_OuputjsonFile "&sort=desc"
            _t4dModWciGitlabListParse "last created tags" $_OuputjsonFile 20
        ;;
        pipeline*)
            _t4dGitLabProjectPipelinesAPIList $_Path $_OuputjsonFile $_branchName
            _t4dModWciGitlabPipelineListParse $_OuputjsonFile 1
        ;;
        *)
            _t4dDebugLog $plog "Nothing to do with $_Path"
        ;;
    esac

###############################
}
