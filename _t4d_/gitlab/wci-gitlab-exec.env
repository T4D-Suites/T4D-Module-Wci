_t4dModWciGitlabHandleStartReturn(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModWciGitlabHandleStartReturn
#   - Name:
#       _t4dModWciGitlabHandleStartReturn
###
#   - Synopsis:
#       Handle start pipeline return
###
#   - Usage:
#       _t4dModWciGitlabHandleStartReturn <repo> <branch> <JsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _repo="$1"
    local _branchName="$2"
    local _OuputjsonFile="$3"

    local _message="$(_t4dGetJsonData ${_OuputjsonFile} ".message")"
    case $_message in 
        null*)
            _t4dDebugLog $psucceed "Pipeline $(_t4dGetJsonData ${_OuputjsonFile} ".id") started for $_repo"
            _t4dPromptEndOfLine "$(_t4dGetJsonData ${_OuputjsonFile} ".web_url")" $plblue
        ;;
        404*)
            _t4dPromptSquare ${_message} ${pred}
            _t4dDebugLog $pwarning "Project $_repo does not exists"
        ;;
        *base*)
            local _subMessage="$(_t4dGetJsonData ${_OuputjsonFile} ".message.base[]")"
            _t4dPromptSquare ${_subMessage} ${pred}
            _t4dDebugLog $pwarning "Branch $_branchName in $_repo does not exists"
        ;;
        *)
            _t4dPromptSquare ${_message} ${pred}
        ;;
    esac

###############################
}

_t4dModWciGitlabStart(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModWciGitlabStart
#   - Name:
#       _t4dModWciGitlabStart
###
#   - Synopsis:
#       start pipeline from given path
###
#   - Usage:
#       _t4dModWciGitlabStart <Repo> <Branch>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

    local _Path="$(echo $1 | cut -d '|' -f1)"
    local _requestBr="$(echo $1 | cut -d '|' -f2)"

    if [[ "$_requestBr" == "$_Path" ]]; then _requestBr=""; fi
    local _branchName="${_requestBr:-$(_t4dSrcGitInfoBranch)}"
    local _repo="${_Path:-$(_t4dSrcGitInfoGetAbsolutePath)}"

    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabParam.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabExec.json"

cat > $_InputjsonFile << EOF
{
    "ref": "${_branchName}"
}
EOF

    _t4dDebugLog $plog "Starting pipeline for $_repo on branch $_branchName"
    _t4dGitLabProjectPipelinesAPIStart $_repo $_InputjsonFile $_OuputjsonFile

    _t4dModWciGitlabHandleStartReturn $_repo $_branchName $_OuputjsonFile

###############################
}

_t4dModWciGitlabStartWithParams(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModWciGitlabStartWithParams
#   - Name:
#       _t4dModWciGitlabStartWithParams
###
#   - Synopsis:
#       start pipeline from given path with parameters
###
#   - Usage:
#       _t4dModWciGitlabStartWithParams <Repo> <Branch> <Param=Values> ...
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

    local _Path="$(echo $1 | cut -d '|' -f1)"
    local _requestBr="$(echo $1 | cut -d '|' -f2)"

    shift
    local _variables=""
    while [[ "$@" != "" ]]; do
        _variables="${_variables}{\"key\": \"${1%%=*}\", \"value\": \"${1##*=}\"}, "
        shift
    done
    _variables=$(echo $_variables | sed 's/, $//g')

    if [[ "$_requestBr" == "$_Path" ]]; then _requestBr=""; fi
    local _branchName="${_requestBr:-$(_t4dSrcGitInfoBranch)}"
    local _repo="${_Path:-$(_t4dSrcGitInfoGetAbsolutePath)}"

    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabParam.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabExec.json"

cat > $_InputjsonFile << EOF
{
    "ref": "${_branchName}",
    "variables": [
        ${_variables}
    ]
}
EOF

    _t4dDebugLog $plog "Starting pipeline for $_repo on branch $_branchName"
    _t4dGitLabProjectPipelinesAPIStart $_repo $_InputjsonFile $_OuputjsonFile

    _t4dModWciGitlabHandleStartReturn $_repo $_branchName $_OuputjsonFile

###############################
}

_t4dModWciGitlabStop(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModWciGitlabStop
#   - Name:
#       _t4dModWciGitlabStop
###
#   - Synopsis:
#       stop pipeline from given path
###
#   - Usage:
#       _t4dModWciGitlabStop <Repo> <Pipeline>
#       _t4dModWciGitlabStop <PipelineUrl>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

    local _ID
    local _repo

    # _t4dDebugLog $plog "INPUT $1"
    case $1 in
        http*)
            local __UUID="$(_t4dGitLabUtilsGetPullRequestUuid ${1})"
            local __KEY="$(echo $__UUID | cut -d '|' -f1)"
            local __REPOSITORY="$(echo $__UUID | cut -d '|' -f2)"
            _repo="$(echo ${__KEY}/${__REPOSITORY})"
            _ID="$(echo $__UUID | cut -d '|' -f3)"
        ;;
        *)
            _repo="$(echo $@ | cut -d ' ' -f1)"
            _ID="$(echo $@ | cut -d ' ' -f2)"
            if [[ "${_ID}" == "${_repo}" ]]; then _repo="$(_t4dSrcGitInfoGetAbsolutePath)"; fi
        ;;
    esac

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/wci/_t4dModWciGitlabExec.json"
    
    _t4dDebugLog $plog "Stopping pipeline $_ID for $_repo"
    _t4dGitLabProjectPipelinesAPIStop $_repo $_ID $_OuputjsonFile

    local _message="$(_t4dGetJsonData ${_OuputjsonFile} ".message")"
    case $_message in 
        null*)
            #echo "${plpurple}Cancelling $_ID${pstd}" | sed 's|%||g'
            _t4dPromptEndOfLine "$(_t4dGetJsonData ${_OuputjsonFile} ".web_url")" $plblue
        ;;
        404*)
            _t4dPromptSquare ${_message} ${pred}
            _t4dDebugLog $pwarning "Pipeline $_ID does not exists for project $_repo"
        ;;
        *)
            _t4dPromptSquare ${_message} ${pred}
        ;;
    esac

###############################
}