#### MODULE HEADER BLOC
#
#   - Name:
#       wci
###
#   - Synopsis:
#       Tools to handle multiple ci configuration
###
#   - Prefix:
#       _t4dModWci
###
#   - Error Code:
#       360
###
#  -  Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#  -  Author(s):
#       Quentin NIO
#
###
#### HEADER BLOC ####

T4D_MOD_WCI_ROOT="$T4D_MODULES_PATH/wci"
T4D_MOD_WCI_CREDENTIALS_FILE="${T4D_MOD_WCI_CREDENTIALS_FILE:-$T4D_ROOT_PATH/.config/wci/credentials.properties}"

for _file in $(find $T4D_MOD_WCI_ROOT/_t4d_ -maxdepth 2 -type f | grep '.env$'); do
    # _t4dDebugLog "> $plog" "$_file"
    source $_file
done

wci(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### wci
#   - Name:
#       wci
###
#   - Synopsis:
#       Tools to handle multiple ci configuration
###
#   - Definition:
#       {Text}
#       {Text}
#
#       ยง Part1
#           1. List
#           2. List
#           3. List
#
#       ยง Part2
#           wci <server>:<path> [branch] [buildID] <action> [ExtraArgs]
#
###
#   - Usage:
#       * wci <option>  [arguments]
#           Will execute wci command with all arguments
#       * wci help <option>       
#           Show specific option's documentation 
#
###
#   - Options:
#
###
#   - Example:
#       * {Example1}              = {One-Line Description}
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local CHPWD=1
    local _t4dWciError=360
    local _debug="false"
    mkdir -p $T4D_PROJECT_LOG_PATH/wci
    if [[ $1 != "help" ]]; then
        _t4dModWciLogo main
    fi
    if [[ "$1" == "-debug" ]]; then
        _debug="true"
        set -x
        shift
    fi
    
    (set -e
        case $1 in
            help)                _t4dModWciHelp ${@:2}               ;;
            list)                _t4dModWciList ${@:2}               ;;
            *)                   _t4dModWciDefault $@                ;;
         esac
    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then
        _t4dWciError="0"
    fi
    if [[ "$_debug" == "true" ]]; then
        set +x
    fi
    return $_t4dWciError
###############################
}

#AUTO COMPLETION
 _wci(){
    local cur prev opts
    local _name='wci'
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ -e $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name} ]]; then
        if [[ ${prev} == "${_name}" ]] || [[ ${prev} == "help" ]] ; then
            opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name})"
            if [[ -e "$WS_WCI_CONFIG_FILE" ]]; then
                opts="$opts $(_t4dManifestXmlGetMarker srv name $WS_WCI_CONFIG_FILE)"
            fi
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        elif [[ -e "$T4D_MODULES_PATH/${_name}/.ressources/completions/srv/${prev}" ]]; then
            opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/srv/${prev})"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        elif [[ -e "$T4D_MODULES_PATH/${_name}/.ressources/completions/srv/$(echo $prev | sed 's|:|_/|g')" ]]; then
            opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/srv/$(echo $prev | sed 's|:|_/|g'))"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        elif [[ -e "$T4D_MODULES_PATH/${_name}/.ressources/completions/${_name}-module/${option}" ]]; then
            opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name}-module/${option})"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        fi
    fi
 }

_t4dModWciHelp(){
###### _t4dModWciHelp
#   - Name:
#       _t4dModWciHelp
###
#   - Synopsis:
#       Show Module Documentation
###
#   - Definition:
#       Parse module Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
########### CODE BLOC #########
    local _Internal="${2:-shell}"
    local _Module='wci'
    local _MainContent="$(_t4dDocGetFunctionContent ${_Module})"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|$_Module $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "${_Module}" ]]; then
        _t4dModWciLogo doc
        t4dHelp -no-logo ${_Module}
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}
###############################

_t4dModWciLogo(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-module.env
# v1.8.0
###### _t4dModWciLogo
#   - Name:
#       _t4dModWciLogo
###
#   - Synopsis:
#       Show Ascii Module logo art
###
##### DOCUMENTATION BLOC #####
########### CODE BLOC #########
     local _color=${1:-$plcyan}
     hashL1="##      ##     #####      ###### "
     hashL2="###    ###   ##    ##    ##    ##"
     hashL3="## #### ##  ##     ##   ##     ##"
     hashL4="##  ##  ##  ##    ##   ##     ## "
     hashL5="##      ##   #####    ########   "
     if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
         #DoNothing
     elif [[ "$1" == "doc" ]]; then
         local _Content="${hashL1}%${hashL2}%${hashL3}%${hashL4}%${hashL5}"
         _t4dDocWks ${_Content} ${pired}
     elif [[ "$1" == "main" ]]; then
         local center="$(_t4dPromptCenterSpace "60" | sed "s|-||g")"
         echo "${center}${plwhite}                     \`#####@@!$$\`  ))        "
         echo          "${center}                 ((  ,####@!!$:   ))           "    
         echo          "${center}                ((  ,####@!!$:   ))           "    
         echo          "${center}                    \`##@@!$:                 "        
         echo          "${center}                     \`#@!!$                 "
         echo          "${center}               !@#    \`#@!$:       @#$     "
         echo          "${center}                       \`@!$:               "
         echo          "${center}                     \`\\ \`!: /\`'                   "
         _t4dPromptVarCenterWithChar $(_t4dPromptSize) "   W           \"-.\"//.-\".\`-.\"_\\\\-.\           W       " " " | sed 's|%||g'
         _t4dPromptVarCenterWithChar $(_t4dPromptSize) "    C  \" -.\"-.\\\\\"-.\"//.-\".\`-.\"_\\\\-.\".-\\\".-//  C       " " " | sed 's|%||g'
         _t4dPromptVarCenterWithChar $(_t4dPromptSize) "     I \" -.\"-.\\\\\"-.\"//.-\".\`-.\"_\\\\-.\".-\\\".-// I        " " " | sed 's|%||g'
         echo "$pstd"
     else
         local center="$(_t4dPromptCenterSpace "${\#l5}" | sed "s|-||g")"
         echo "${center}${_color} $hashL1 ${pstd}"
         echo "${center}${_color} $hashL2 ${pstd}"
         echo "${center}${_color} $hashL3 ${pstd}"
         echo "${center}${_color} $hashL4 ${pstd}"
         echo "${center}${_color} $hashL5 ${pstd}"
         echo ""
     fi
}
###############################
